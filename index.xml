<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Bruno Luiz Silva</title><link>https://brunoluiz.net/</link><description>Recent content on Bruno Luiz Silva</description><image><title>Bruno Luiz Silva</title><url>https://brunoluiz.net/cover.jpg</url><link>https://brunoluiz.net/cover.jpg</link></image><generator>Hugo -- 0.148.2</generator><language>en</language><lastBuildDate>Tue, 12 Aug 2025 10:00:00 +0000</lastBuildDate><atom:link href="https://brunoluiz.net/index.xml" rel="self" type="application/rss+xml"/><item><title>Naming cloud resources doesn't have to be hard</title><link>https://brunoluiz.net/blog/2025/aug/naming-cloud-resources-is-hard/</link><pubDate>Tue, 12 Aug 2025 10:00:00 +0000</pubDate><guid>https://brunoluiz.net/blog/2025/aug/naming-cloud-resources-is-hard/</guid><description>Most of us have to name “things” daily. Most are easy to change due to refactoring tools, but cloud resources can be impossible at times. We will cover how to avoid major complications by simply re-thinking how you name cloud resources and (hopefully) avoid renames.</description></item><item><title>Low downtime Postgres upgrade: the runbook (part II)</title><link>https://brunoluiz.net/blog/2023/sep/low-downtime-postgres-upgrade-i-want-to-believe-2/</link><pubDate>Sun, 03 Sep 2023 12:00:00 +0000</pubDate><guid>https://brunoluiz.net/blog/2023/sep/low-downtime-postgres-upgrade-i-want-to-believe-2/</guid><description>No one is really prepared to upgrade big Postgres instances without downtime. This second part will focus on how to do it the lowest downtime possible.</description></item><item><title>Low downtime Postgres upgrade: I want to believe (part I)</title><link>https://brunoluiz.net/blog/2022/nov/low-downtime-postgres-upgrade-i-want-to-believe/</link><pubDate>Fri, 18 Nov 2022 12:00:00 +0000</pubDate><guid>https://brunoluiz.net/blog/2022/nov/low-downtime-postgres-upgrade-i-want-to-believe/</guid><description>Postgres is a great database, one of developer&amp;rsquo;s favourites, but upgrades are far from easy and smooth. The journey of selecting an optimal solution and weighing its trade-offs and risks is always an exciting challenge.</description></item><item><title>ImageWand: privacy-first image conversion experiment with Golang &amp; WASM</title><link>https://brunoluiz.net/blog/2022/aug/imagewand-privacy-first-image-conversion-experiment-with-golang-and-wasm/</link><pubDate>Sun, 07 Aug 2022 12:00:00 +0000</pubDate><guid>https://brunoluiz.net/blog/2022/aug/imagewand-privacy-first-image-conversion-experiment-with-golang-and-wasm/</guid><description>After my experiment with GIFSane, one thing was clear: WASM shines when we think about complex applications (eg: media manipulation), usually performing better or opening more opportunities than JavaScript. It is finally time to try to create something from scratch, using Golang WASM toolchain</description></item><item><title>GIFs (sane) playback control using WASM and FFmpeg</title><link>https://brunoluiz.net/blog/2022/jan/gif-sane-playback-control-ffmpegwasm/</link><pubDate>Thu, 20 Jan 2022 12:00:00 +0000</pubDate><guid>https://brunoluiz.net/blog/2022/jan/gif-sane-playback-control-ffmpegwasm/</guid><description>Not having playback control on GIFs always annoyed me a bit. I always secretly hoped that one day browsers would support this. This day never arrived, and I decided to take matters into my own hands.</description></item><item><title>The forgotten art of HTML redirects, without either HTTP 301 or JavaScript</title><link>https://brunoluiz.net/blog/2021/jun/redirect-users-client-side-only/</link><pubDate>Thu, 17 Jun 2021 12:00:00 +0000</pubDate><guid>https://brunoluiz.net/blog/2021/jun/redirect-users-client-side-only/</guid><description>One of the first things API developers learn is HTTP codes. From these 3xx are special, as they redirect users from A to B. But what if I told you there is a way to do it without HTTP codes?</description></item><item><title>Getting good code reviews from peers</title><link>https://brunoluiz.net/blog/2020/sep/getting-good-code-reviews/</link><pubDate>Mon, 28 Sep 2020 19:00:00 +0000</pubDate><guid>https://brunoluiz.net/blog/2020/sep/getting-good-code-reviews/</guid><description>Every software developer, soon after pushing code to the repository, has this urge to ping the team to ask for code review. But, I dare to say: don&amp;rsquo;t do it! Most likely the code will still have some issues, especially if this is your first push for this feature.</description></item><item><title>GRPC: A powerful way to improve your Golang APIs</title><link>https://brunoluiz.net/blog/2019/nov/grpc-a-powerful-way-to-improve-golang-apis/</link><pubDate>Thu, 05 Dec 2019 17:00:00 +0000</pubDate><guid>https://brunoluiz.net/blog/2019/nov/grpc-a-powerful-way-to-improve-golang-apis/</guid><description>Web APIs are everywhere, with REST being one of the most popular ways to distribute it. With recent technologies, there are better ways to implement them, GRPC been one of them.</description></item><item><title>GraphQL feat API Gateway</title><link>https://brunoluiz.net/blog/graphql-as-a-gateway/</link><pubDate>Mon, 01 Jul 2019 08:00:00 +0000</pubDate><guid>https://brunoluiz.net/blog/graphql-as-a-gateway/</guid><description>GraphQL, REST, gRPC, Thrift&amp;hellip; Have you ever imagined how to stick these together in a micro-services architecture and expose to the world? There are some common ways to do it, such as using Nginx or Kong. But, an alternative way to do this is by using GraphQL in front of all services.</description></item><item><title>Kubernetes devops productivity hacks</title><link>https://brunoluiz.net/blog/2019/mar/kubernetes-devops-productivity-hacks/</link><pubDate>Thu, 14 Mar 2019 21:37:37 +0000</pubDate><guid>https://brunoluiz.net/blog/2019/mar/kubernetes-devops-productivity-hacks/</guid><description>Today, Kubernetes is the de facto container orchestration solution. Together with the devops culture, developers have to get familiarised to its tools, such as kubectl. But how do we go beyond kubectl?</description></item><item><title>A guide on npm package publishing</title><link>https://brunoluiz.net/blog/2019/feb/a-guide-to-npm-package-publishing/</link><pubDate>Fri, 15 Feb 2019 19:44:37 +0000</pubDate><guid>https://brunoluiz.net/blog/2019/feb/a-guide-to-npm-package-publishing/</guid><description>If you are not new in the JavaScript world, you might have already heard about npm. It is a package manager which lets developers easily add dependencies to projects, as &lt;code>npm install hello-world&lt;/code>. But, have you ever asked, How do I create and publish my own packages</description></item><item><title>A Tale Of How To Not Deploy Two Months Old Features</title><link>https://brunoluiz.net/blog/2018/mar/a-tale-of-how-to-not-deploy-two-months-old-features/</link><pubDate>Wed, 07 Mar 2018 19:44:37 +0000</pubDate><guid>https://brunoluiz.net/blog/2018/mar/a-tale-of-how-to-not-deploy-two-months-old-features/</guid><description>There is one big and very special date on the e-commerce and retail market and it is called Black Friday. For many, it means &amp;ldquo;discount prices&amp;rdquo;, &amp;ldquo;sale!&amp;rdquo;, &amp;ldquo;50% off&amp;rdquo;, but for developers and IT people it is a challenging adventure.</description></item><item><title>Joi: validate input and define databases in JavaScript</title><link>https://brunoluiz.net/blog/2017/aug/joi-validate-input-and-define-databases-in-javascript/</link><pubDate>Wed, 30 Aug 2017 19:44:37 +0000</pubDate><guid>https://brunoluiz.net/blog/2017/aug/joi-validate-input-and-define-databases-in-javascript/</guid><description>As the saying goes: never trust user input. People coming from PHP and Java have many validation libraries available. But what about JavaScript? There are some options, but none seems more interesting than Joi.</description></item><item><title>Still using GitFlow? What about a simpler alternative?</title><link>https://brunoluiz.net/blog/2017/jul/still-using-gitflow-what-about-a-simpler-alternative/</link><pubDate>Tue, 18 Jul 2017 19:44:37 +0000</pubDate><guid>https://brunoluiz.net/blog/2017/jul/still-using-gitflow-what-about-a-simpler-alternative/</guid><description>GitFlow is a branching model created by Vincent Driessen on 2010. Since it was published, many companies had tested and implemented it, which allows us to have many reviews about how well (or not) it works. After some discussions within our team, we decided to not go with GitFlow, but use a simpler model instead, together with a tightly defined workflow.</description></item><item><title>Are you using git push force? Oh mate, you are doing it wrong!</title><link>https://brunoluiz.net/blog/2017/jun/are-you-using-git-push-force-oh-mate-you-are-doing-it-wrong/</link><pubDate>Sat, 03 Jun 2017 19:44:37 +0000</pubDate><guid>https://brunoluiz.net/blog/2017/jun/are-you-using-git-push-force-oh-mate-you-are-doing-it-wrong/</guid><description>&lt;p>You are developing some feature together with your team. Most likely you have done the usual dance: checkout a branch from the master or development branch, done your commits, pushed this feature branch to the remote and opened a push request for peer review.&lt;/p>
&lt;p>In ideal cases, you will be able to just squash and merge after some reviews and fixes. But, the world is not ideal (as you might know), and maybe one of your mates modified the same files and already merged it. So, surprise surprise, you got a merge conflict to resolve!&lt;/p>
&lt;p>This usually means you will need to do a &lt;em>git rebase&lt;/em> before merging. After doing it, this new rebased branch need to be pushed back to the remote. And here is one of the steps that people usually do wrong:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git push —-force
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You might be thinking: what is the problem with this?&lt;/p>
&lt;p>Well, &lt;strong>push force&lt;/strong> ignore everything on the remote and override it with local changes. This is &amp;ldquo;kinda&amp;rdquo; what you want, but what if you did some mistake in the rebase but didn&amp;rsquo;t notice? Or someone pushed more modifications while you were rebasing? Yes, you thought right: kaputt, gone. One safer way to do this is using:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git push --force-with-lease
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This simple command will not push force your modifications until it checked if everything that is in the remote is also in your rebased version. It is the same as a &lt;em>push force&lt;/em>, but safer.&lt;/p>
&lt;p>If you want to know more about it, checkout &lt;a href="https://developer.atlassian.com/blog/2015/04/force-with-lease/">this article&lt;/a>. But the basic idea is: &lt;strong>start to use &lt;em>force-with-lease&lt;/em> instead of &lt;em>force&lt;/em>&lt;/strong>.&lt;/p></description></item></channel></rss>